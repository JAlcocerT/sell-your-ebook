# Docker Compose for Astro Static Site Generation
# https://github.com/JAlcocerT/Docker/tree/main/Web/SSGs/Astro

services:
  # Astro Development Server
  astro-dev:
    image: node:22.16-alpine3.22
    container_name: astro-dev
    working_dir: /app
    ports:
      - "4321:4321"  # Astro dev server with live changes - Go to http://localhost:4321/
    volumes:
      - ./landing-page-book-astro-tailwind:/app
      - node_modules_dev:/app/node_modules  # Named volume for node_modules
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 4321"
    environment:
      - NODE_ENV=development
      - HOST=0.0.0.0
      - PORT=4321
    networks:
      - project-sellyourebook
    tty: true
    stdin_open: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4321/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Astro Production Build & Serve
  astro-prod:
    image: node:22.16-alpine3.22
    container_name: astro-prod
    working_dir: /app
    volumes:
      - ./landing-page-book-astro-tailwind:/app
      - node_modules_prod:/app/node_modules  # Named volume for node_modules
    ports:
      - "8090:4321"  # Production server on port 8090
    command: >
      sh -c "npm install && 
      npm run build && 
      npx http-server ./dist -p 4321 -a 0.0.0.0"
    environment:
      - NODE_ENV=production
      - PORT=4321
    networks:
      - project-sellyourebook
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4321/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Config Editor Flask App
  config-editor:
    image: python:3.11-slim
    container_name: config-editor
    working_dir: /app
    ports:
      - "5000:5000"  # Flask app on port 5000
    volumes:
      - ./config-editor:/app
      - ./landing-page-book-astro-tailwind/src:/app/config  # Mount config directory
    command: sh -c "pip install -r requirements.txt && python app.py"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    networks:
      - project-sellyourebook
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  node_modules_dev:
  node_modules_prod:

networks:
  project-sellyourebook:
    driver: bridge